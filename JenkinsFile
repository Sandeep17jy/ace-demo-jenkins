stage('Create the required imagestreams') {
      openshift.withCluster() {
        openshift.withProject("${OCP_NAMESPACE}") {
            
          def templateSelector = openshift.selector( "template", "ace-imagestreams-template")
          def templateExists = templateSelector.exists()
          def template
          if (!templateExists) {
            template = openshift.create('https://raw.githubusercontent.com/ox-prolifics/ace-demo-jenkins/master/image-stream-template.json').object()
          } else {
            templateSelector.delete();
            template = openshift.create('https://raw.githubusercontent.com/ox-prolifics/ace-demo-jenkins/master/image-stream-template.json').object()
          }
   
          def isModels = openshift.process('ace-imagestreams-template')
          for(imageStream in isModels) 
          {
            echo "the imagestream is: " + imageStream.metadata["name"]
            def imageStreamExists = openshift.selector( "is", imageStream.metadata["name"] ).exists()
            if(!imageStreamExists)
            {
              openshift.create(imageStream)
            }
          } 
            
        }
      }
    }

stage('Create BuildConfig Objects') {
      openshift.withCluster() {
        openshift.withProject("${OCP_NAMESPACE}") {
 
          def templateSelector = openshift.selector( "template", "ace-buildconfig-template")
          def templateExists = templateSelector.exists()
          def template
          if (!templateExists) {
            template = openshift.create('https://raw.githubusercontent.com/ox-prolifics/ace-demo-jenkins/master/ace-bc.yaml').object()
          } else {
            templateSelector.delete();
            template = openshift.create('https://raw.githubusercontent.com/ox-prolifics/ace-demo-jenkins/master/ace-bc.yaml').object()
          }

          def bcModels = openshift.process('ace-buildconfig-template')
          for(bc in bcModels) 
          {
            echo "the bc is: " + bc.metadata["name"]
            def bcExists = openshift.selector( "bc", bc.metadata["name"] ).exists()
            if(!bcExists)
            {
              openshift.create(bc)
            }
          } 
        }
      }
    }

if (params.REQUESTED_ACTION.equals("full")  || params.REQUESTED_ACTION.equals("prebuild")) {   
 stage('Build ace-only-prebuild layer') {
   openshift.withCluster() {
     openshift.withProject("${OCP_NAMESPACE}") {
       openshift.selector("bc", "ace-only-prebuild").startBuild("--wait=true")
     }
   }
 }
  
 stage('Tag ace-only-prebuild Image') {
    openshift.withCluster() {
     openshift.withProject("${OCP_NAMESPACE}") {
       openshift.tag("ace-only-prebuild:latest", "ace-only-prebuild:${BUILD_NUMBER}")
     }
   }
 }
}

if (params.REQUESTED_ACTION.equals("full")  || params.REQUESTED_ACTION.equals("build-ace-only")) {
  stage('Build ace-only layer') {
   openshift.withCluster() {
     openshift.withProject("${OCP_NAMESPACE}") {
       openshift.selector("bc", "ace-only").startBuild("--wait=true")
     }
   }
 }
  
 stage('Tag ace-only Image') {
    openshift.withCluster() {
     openshift.withProject("${OCP_NAMESPACE}") {
       openshift.tag("ace-only:latest", "ace-only:${BUILD_NUMBER}")
     }
   }
 }
}

if (params.REQUESTED_ACTION.equals("full")  || params.REQUESTED_ACTION.equals("build-ace-mqclient")) {
  stage('Build ace-mqclient layer') {
   openshift.withCluster() {
     openshift.withProject("${OCP_NAMESPACE}") {
       openshift.selector("bc", "ace-mqclient-build").startBuild("--wait=true")
     }
   }
 }
  
 stage('Tag ace-mqclient Image') {
    openshift.withCluster() {
     openshift.withProject("${OCP_NAMESPACE}") {
       openshift.tag("ace-mqclient:latest", "ace-mqclient:${BUILD_NUMBER}")
     }
   }
 }
}

if (params.REQUESTED_ACTION.equals("full")  || params.REQUESTED_ACTION.equals("build-ace-bar")) {
  stage('Build ace-bar layer') {
   openshift.withCluster() {
     openshift.withProject("${OCP_NAMESPACE}") {
       openshift.selector("bc", "ace-bar-build").startBuild("--wait=true")
     }
   }
 }
  
 stage('Tag ace-mqclient Image') {
    openshift.withCluster() {
     openshift.withProject("${OCP_NAMESPACE}") {
       openshift.tag("ace-bar:latest", "ace-bar:${BUILD_NUMBER}")
     }
   }
 }
}
